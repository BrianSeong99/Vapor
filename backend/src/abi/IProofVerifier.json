{"abi":[{"type":"function","name":"getBatch","inputs":[{"name":"batchId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IProofVerifier.Batch","components":[{"name":"stateRoot","type":"bytes32","internalType":"bytes32"},{"name":"ordersRoot","type":"bytes32","internalType":"bytes32"}]}],"stateMutability":"view"},{"type":"function","name":"getLatestBatchId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getOrdersRoot","inputs":[{"name":"batchId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getStateRoot","inputs":[{"name":"batchId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"submitProof","inputs":[{"name":"batchId","type":"uint256","internalType":"uint256"},{"name":"prevBatchId","type":"uint256","internalType":"uint256"},{"name":"prevStateRoot","type":"bytes32","internalType":"bytes32"},{"name":"prevOrdersRoot","type":"bytes32","internalType":"bytes32"},{"name":"newStateRoot","type":"bytes32","internalType":"bytes32"},{"name":"newOrdersRoot","type":"bytes32","internalType":"bytes32"},{"name":"proof","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ProofSubmitted","inputs":[{"name":"batchId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"newStateRoot","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"newOrdersRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"error","name":"BatchAlreadyExists","inputs":[]},{"type":"error","name":"InvalidBatchId","inputs":[]},{"type":"error","name":"InvalidProof","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getBatch(uint256)":"5ac44282","getLatestBatchId()":"aea32261","getOrdersRoot(uint256)":"9a4b9a84","getStateRoot(uint256)":"c3801938","submitProof(uint256,uint256,bytes32,bytes32,bytes32,bytes32,bytes)":"c34f7c38"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BatchAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newOrdersRoot\",\"type\":\"bytes32\"}],\"name\":\"ProofSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ordersRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IProofVerifier.Batch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestBatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"getOrdersRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"getStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevBatchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"prevStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevOrdersRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newOrdersRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"submitProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the Vapor Proof Verifier Manages batch state and order roots with ZK proof verification\",\"kind\":\"dev\",\"methods\":{\"getBatch(uint256)\":{\"details\":\"Get the batch data for a specific batch ID\",\"params\":{\"batchId\":\"The batch ID\"},\"returns\":{\"_0\":\"The batch data including roots and verification status\"}},\"getLatestBatchId()\":{\"details\":\"Get the latest batch ID\",\"returns\":{\"_0\":\"The latest batch ID\"}},\"getOrdersRoot(uint256)\":{\"details\":\"Get the orders root for a specific batch\",\"params\":{\"batchId\":\"The batch ID\"},\"returns\":{\"_0\":\"The orders root\"}},\"getStateRoot(uint256)\":{\"details\":\"Get the state root for a specific batch\",\"params\":{\"batchId\":\"The batch ID\"},\"returns\":{\"_0\":\"The state root\"}},\"submitProof(uint256,uint256,bytes32,bytes32,bytes32,bytes32,bytes)\":{\"details\":\"Submit a ZK proof for a new batch\",\"params\":{\"batchId\":\"The ID of the new batch\",\"newOrdersRoot\":\"The new orders root after applying orders\",\"newStateRoot\":\"The new state root after applying orders\",\"prevBatchId\":\"The ID of the previous batch\",\"prevOrdersRoot\":\"The previous orders root\",\"prevStateRoot\":\"The previous state root\",\"proof\":\"The ZK proof bytes\"}}},\"title\":\"IProofVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IProofVerifier.sol\":\"IProofVerifier\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@sp1-contracts/=lib/sp1-contracts/contracts/src/\",\":ds-test/=lib/sp1-contracts/contracts/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sp1-contracts/=lib/sp1-contracts/contracts/\"]},\"sources\":{\"src/interfaces/IProofVerifier.sol\":{\"keccak256\":\"0x0f3c42f27d5ea09739f8828b6a928ee1f67030a320a290e888d50e16e35cc01e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ddc7b1a8c9601a357cf90406b087126cabd9cd20149c60f18a3e077ee5899e9\",\"dweb:/ipfs/QmPdq581z8cbjD28NanXwHZNzxQ2L8Lff9RaS9fiVZNMPe\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"BatchAlreadyExists"},{"inputs":[],"type":"error","name":"InvalidBatchId"},{"inputs":[],"type":"error","name":"InvalidProof"},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256","indexed":true},{"internalType":"bytes32","name":"newStateRoot","type":"bytes32","indexed":false},{"internalType":"bytes32","name":"newOrdersRoot","type":"bytes32","indexed":false}],"type":"event","name":"ProofSubmitted","anonymous":false},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getBatch","outputs":[{"internalType":"struct IProofVerifier.Batch","name":"","type":"tuple","components":[{"internalType":"bytes32","name":"stateRoot","type":"bytes32"},{"internalType":"bytes32","name":"ordersRoot","type":"bytes32"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getLatestBatchId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getOrdersRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getStateRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"},{"internalType":"uint256","name":"prevBatchId","type":"uint256"},{"internalType":"bytes32","name":"prevStateRoot","type":"bytes32"},{"internalType":"bytes32","name":"prevOrdersRoot","type":"bytes32"},{"internalType":"bytes32","name":"newStateRoot","type":"bytes32"},{"internalType":"bytes32","name":"newOrdersRoot","type":"bytes32"},{"internalType":"bytes","name":"proof","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"submitProof"}],"devdoc":{"kind":"dev","methods":{"getBatch(uint256)":{"details":"Get the batch data for a specific batch ID","params":{"batchId":"The batch ID"},"returns":{"_0":"The batch data including roots and verification status"}},"getLatestBatchId()":{"details":"Get the latest batch ID","returns":{"_0":"The latest batch ID"}},"getOrdersRoot(uint256)":{"details":"Get the orders root for a specific batch","params":{"batchId":"The batch ID"},"returns":{"_0":"The orders root"}},"getStateRoot(uint256)":{"details":"Get the state root for a specific batch","params":{"batchId":"The batch ID"},"returns":{"_0":"The state root"}},"submitProof(uint256,uint256,bytes32,bytes32,bytes32,bytes32,bytes)":{"details":"Submit a ZK proof for a new batch","params":{"batchId":"The ID of the new batch","newOrdersRoot":"The new orders root after applying orders","newStateRoot":"The new state root after applying orders","prevBatchId":"The ID of the previous batch","prevOrdersRoot":"The previous orders root","prevStateRoot":"The previous state root","proof":"The ZK proof bytes"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@sp1-contracts/=lib/sp1-contracts/contracts/src/","ds-test/=lib/sp1-contracts/contracts/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","sp1-contracts/=lib/sp1-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IProofVerifier.sol":"IProofVerifier"},"evmVersion":"cancun","libraries":{}},"sources":{"src/interfaces/IProofVerifier.sol":{"keccak256":"0x0f3c42f27d5ea09739f8828b6a928ee1f67030a320a290e888d50e16e35cc01e","urls":["bzz-raw://4ddc7b1a8c9601a357cf90406b087126cabd9cd20149c60f18a3e077ee5899e9","dweb:/ipfs/QmPdq581z8cbjD28NanXwHZNzxQ2L8Lff9RaS9fiVZNMPe"],"license":"MIT"}},"version":1},"id":31}